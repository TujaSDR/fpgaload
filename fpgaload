#!/usr/bin/env python3

# You probably need to update spidev

import spidev
import RPi.GPIO as GPIO
import time
import sys

# GPIO pins, BCM numbering
PIN_CONFIG      = 12
PIN_STATUS      = 16
PIN_CONF_DONE   = 26

# Flattens a deeply nested list, use this to construct the lookup table below
def flatten(container):
    for i in container:
        if isinstance(i, list):
            for j in flatten(i):
                yield j
        else:
            yield i

# Hack to construct a lookup table to reverse the bits in a byte
def R2(n): return [n, n + 2*64, n + 1*64, n + 3*64]
def R4(n): return [R2(n), R2(n + 2*16), R2(n + 1*16), R2(n + 3*16)]
def R6(n): return [R4(n), R4(n + 2*4 ), R4(n + 1*4 ), R4(n + 3*4 )]
def REVERSE_BITS(): return [R6(0), R6(2), R6(1), R6(3)]

lookup_table = bytearray(flatten(REVERSE_BITS()))

# Reverse bits in byte
def reverse_bits(byte):
    # Lookup table is quite a bit faster
    return lookup_table[byte]
    #return int('{:08b}'.format(byte)[::-1], 2)

def setup_gpio():
    GPIO.setmode(GPIO.BCM) # Pin numbering as names on header
    GPIO.setup(PIN_CONFIG, GPIO.OUT)
    GPIO.setup(PIN_STATUS, GPIO.IN)
    GPIO.setup(PIN_CONF_DONE, GPIO.IN)

# Reset FPGA
def init_fpga():
    # Set PIN_CONFIG high, wait and assert that PIN_STATUS is high indicating FPGA has gone through POR.
    GPIO.output(PIN_CONFIG, GPIO.HIGH)
    time.sleep(0.01)
    if not GPIO.input(PIN_STATUS):
        raise Exception("init_fpga: -1")
    # Pull PIN_CONFIG low from RBp and wait for PIN_STATUS and CONF_DONE to be low from FPGA.
    GPIO.output(PIN_CONFIG, GPIO.LOW)
    time.sleep(0.01)
    if GPIO.input(PIN_STATUS) or GPIO.input(PIN_CONF_DONE):
        raise Exception("init_fpga: -1")
    # Pull PIN_CONFIG high to start configuration, wait for PIN_STATUS to go high
    GPIO.output(PIN_CONFIG, GPIO.HIGH)
    time.sleep(0.01)
    if not GPIO.input(PIN_STATUS):
        raise Exception("init_fpga: -1")

# Write to FPGA and check that it responds
def write_check_spi(dev, data):
    # Similar to `writebytes` but accepts arbitrary large lists.
    dev.writebytes2(data)
    if not GPIO.input(PIN_CONF_DONE):
        raise Exception("FPGA didn't respond")
    else:
        # Data received, clock additional pulses to start FPGA
        dev.writebytes([0x00])

# Read RBF file from path and reverse the bits in each byte
def read_rbf(rbf):
    return map(lambda byte: reverse_bits(byte), rbf.read())

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    # Filename or read from stdin, useful for piping over ssh
    parser.add_argument('rbf', nargs='?', type=argparse.FileType('rb'), default=sys.stdin.buffer, help="rbf input file")
    args = parser.parse_args()
    # Ok let's program
    try:
        setup_gpio()
        dev = spidev.SpiDev()
        dev.open(0,0) # open /dev/spidev-0.1
        dev.max_speed_hz = 2000000
        data = read_rbf(args.rbf)
        init_fpga()
        write_check_spi(dev, data)
    except Exception as e:
        print(e)
    finally:
        dev.close();
        GPIO.cleanup()
